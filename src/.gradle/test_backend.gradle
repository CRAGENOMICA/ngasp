/**
 * ============================================================================
 *  \brief     tests.gradle
 *  \details   This file defines project tests.
 *  \author    jjene
 *  \version   1.0
 *  \date      Feb 10, 2016
 *  \pre
 *  \bug
 *  \warning
 *  \copyright CRAG 2015.
 * ============================================================================
 * Use this for extracting all example/files used by this file:
 *   cat test_backend.gradle | sed 's/EXAMPLES_PATH/\nEXAMPLES_PATH/g' | grep "EXAMPLES_PATH" | awk '{print $3}' | sed -e "s/'//g" -e "s/,//g" | sort | uniq | awk '{print "mv ./examples/"$1" ./examples2/"}'
*/

/*
================================================================================
IMPORTS
================================================================================
*/

if (SOP == "WINDOWS") {
  apply from: './test_backend_windows.gradle'
} else {
  if (SOP == "MAC") {
    apply from: './test_backend_mac.gradle'
  } else {
    if (SOP == "LINUX") {
      apply from: './test_backend_linux.gradle'
    } else {
    }
  }
}


/*
================================================================================
PREPARE TESTS
================================================================================
*/

/*
--------------------------------------------------------------------------------
PARAMETERS FOR FASTA INPUT -f fasta: [-p -g -c -O -t -s] WHOLE REGION ANALYSIS
--------------------------------------------------------------------------------
*/

task prepareFastaTest01(type:Exec) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa.gz', '-o', '0', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.01.txt'
}

task prepareFastaTest01b(type:Exec, dependsOn:prepareFastaTest01) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '1', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.01b.txt'
}

task prepareFastaTest02(type:Exec, dependsOn:prepareFastaTest01b) {
   commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.02.txt'
}

task prepareFastaTest03(type:Exec, dependsOn:prepareFastaTest02) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.03.txt', '-G', '1'
}

task prepareFastaTest04(type:Exec, dependsOn:prepareFastaTest03) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.04.txt', '-G', '1', '-u', '1'
}

task prepareFastaTest05(type:Exec, dependsOn:prepareFastaTest04) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.05.txt', '-G', '1', '-u', '1'
}

task prepareFastaTest06(type:Exec, dependsOn:prepareFastaTest05) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.06.txt', '-G', '1', '-u', '1', '-p', '2'
}

task prepareFastaTest07(type:Exec, dependsOn:prepareFastaTest06) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.07.txt', '-G', '1', '-u', '1', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
}

task prepareFastaTest08(type:Exec, dependsOn:prepareFastaTest07) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.08.txt', '-G', '1', '-u', '1', '-t', '1000', '-s', '1684'
}

task prepareFastaTest09(type:Exec, dependsOn:prepareFastaTest08) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.09.txt', '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41'
}

task prepareFastaTest10(type:Exec, dependsOn:prepareFastaTest09) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.10.txt', '-G', '1', '-u', '1', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
}

task prepareFastaTest11(type:Exec, dependsOn:prepareFastaTest10) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.fa.11.txt', '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
}

/*
--------------------------------------------------------------------------------
PARAMETERS FOR MS INPUT -f ms: -l [-r -m -F -v -q] SIMULATION ANALYSIS OF
A SINGLE REGION
--------------------------------------------------------------------------------
*/

task prepareMSTest00(type:Exec, dependsOn:prepareFastaTest11) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt.gz', '-o', '0', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.00.txt', '-l', '100000'
}

task prepareMSTest01(type:Exec, dependsOn:prepareMSTest00) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt', '-o', '0', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.01.txt', '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
}

task prepareMSTest01b(type:Exec, dependsOn:prepareMSTest01) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt', '-o', '1', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.01b.txt', '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
}

task prepareTest02(type:Exec, dependsOn:prepareMSTest01b) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_03.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.02.txt', '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
}

task prepareMSTest03(type:Exec, dependsOn:prepareTest02) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_03.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.03.txt', '-l', '100000', '-G', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
}

task prepareMSTest04(type:Exec, dependsOn:prepareMSTest03) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_07.ms.txt', '-o', '1', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.04.txt', '-l', '10000', '-r', '5'
}

task prepareMSTest05(type:Exec, dependsOn:prepareMSTest04) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.05.txt', '-l', '10000', '-r', '5'
}

task prepareMSTest06(type:Exec, dependsOn:prepareMSTest05) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.06.txt', '-l', '10000', '-r', '5', '-F', '1'
}

task prepareMSTest07(type:Exec, dependsOn:prepareMSTest06) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.07.txt', '-l', '10000', '-r', '5', '-F', '1', '-q', '0.01'
}

task prepareMSTest08(type:Exec, dependsOn:prepareMSTest07) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.08.txt', '-l', '10000', '-r', '5', '-G', '1', '-v', '2.0'
}

task prepareMSTest09(type:Exec, dependsOn:prepareMSTest08) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.09.txt', '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
}

task prepareMSTest10(type:Exec, dependsOn:prepareMSTest09) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.10.txt', '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt'
}

task prepareMSTest11(type:Exec, dependsOn:prepareMSTest10) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.11.txt', '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684'
}

task prepareMSTest12(type:Exec, dependsOn:prepareMSTest11) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.12.txt', '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684', '-v', '2.0'
}

task prepareMSTest13(type:Exec, dependsOn:prepareMSTest12) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation1000.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.ms.13.txt', '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684', '-v', '2.0', '-r', '1000'
}

/*
--------------------------------------------------------------------------------
PARAMETERS FOR TFASTA INPUT -f tfa: -w [-z -Y -W -E -O -t -s] SLIDING WINDOW 
ANALYSIS OF EMPIRICAL DATA
--------------------------------------------------------------------------------
*/

task prepareTFATest01(type:Exec, dependsOn:prepareMSTest12) {   // prepareMSTest13
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa.gz', '-o', '0', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.01.txt', '-w', '100000'
}

task prepareTFATest01b(type:Exec, dependsOn:prepareTFATest01) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '1', '42', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.01b.txt', '-w', '100000'
}

task prepareTFATest02(type:Exec, dependsOn:prepareTFATest01b) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.02.txt', '-w', '100000'
}

task prepareTFATest03(type:Exec, dependsOn:prepareTFATest02) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.03.txt', '-G', '1', '-w', '100000'
}

task prepareTFATest04(type:Exec, dependsOn:prepareTFATest03) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.04.txt', '-G', '1', '-u', '1', '-w', '100000'
}

task prepareTFATest04b(type:Exec, dependsOn:prepareTFATest04) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '10bpchr10.tfa', '-o', '10', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '10bchr10.tfa.04.txt', '-G', '1', '-u', '1', '-w', '10'
}

task prepareTFATest04c(type:Exec, dependsOn:prepareTFATest04b) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '10bpchr10.tfa', '-o', '6', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '10bchr10c.tfa.04.txt', '-G', '1', '-u', '1', '-w', '10'
}

task prepareTFATest05(type:Exec, dependsOn:prepareTFATest04c) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.05.txt', '-G', '1', '-u', '1', '-w', '100000'
}

task prepareTFATest06(type:Exec, dependsOn:prepareTFATest05) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/,
  '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.06.txt', '-G', '1', '-u', '1', '-w', '10000'
}

task prepareTFATest07(type:Exec, dependsOn:prepareTFATest06) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.07.txt', '-G', '1', '-u', '1', '-w', '10000', '-z', '20000'
}

task prepareTFATest08(type:Exec, dependsOn:prepareTFATest07) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.08.txt', '-G', '1', '-u', '1', '-W', EXAMPLES_PATH + 'coord_100Kb.txt', '-w', '100000'
}

task prepareTFATest09(type:Exec, dependsOn:prepareTFATest08) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/,
  '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.09.txt', '-G', '1', '-u', '1', '-w', '10000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt'
}

task prepareTFATest10(type:Exec, dependsOn:prepareTFATest09) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.10.txt', '-G', '1', '-u', '1', '-w', '1000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt', '-Y', '0'
}

task prepareTFATest11(type:Exec, dependsOn:prepareTFATest10) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.11.txt', '-G', '1', '-u', '1', '-w', '100000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt', '-Y', '0'
}

task prepareTFATest12(type:Exec, dependsOn:prepareTFATest11) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.12.txt', '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-w', '100000'
}

task prepareTFATest13(type:Exec, dependsOn:prepareTFATest12) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.13.txt', '-G', '1', '-u', '1', '-w', '100000', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt'
}

task prepareTFATest14(type:Exec, dependsOn:prepareTFATest13) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.14.txt', '-G', '1', '-u', '1', '-w', '100000', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt'
}

task prepareTFATest14b(type:Exec, dependsOn:prepareTFATest14) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.14b.txt', '-G', '1', '-u', '1', '-w', '100000', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt', '-Y', '0'
}

task prepareTFATest15(type:Exec, dependsOn:prepareTFATest14b) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.15.txt', '-G', '1', '-u', '1', '-w', '10000', '-z', '20000', '-t', '1000', '-s', '1684'
}

task prepareTFATest16(type:Exec, dependsOn:prepareTFATest15) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/,
  '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.16.txt', '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-t', '1000', '-s', '1684'
}

task prepareTFATest17(type:Exec, dependsOn:prepareTFATest16) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/,
  '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '20', '20', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.17.txt', '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-t', '1000', '-s', '1684'
}

task prepareTFATest18(type:Exec, dependsOn:prepareTFATest16) { //prepareTFATest17
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '10', '10', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.18.txt', '-G', '1', '-u', '1', '-w', '100', '-z', '100'
}

task prepareTFATest19(type:Exec, dependsOn:prepareTFATest18) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '10', '10', '2', '-T', PREVIOUS_TESTS_PATH + '100chr10.tfa.19.txt', '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-O', '22', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '40', '41'
}

task prepareOptimalTest1(type:Exec, dependsOn:prepareTFATest19) {
	commandLine PREVIOUS_BINARY/*, NGASP_COMMAND*/, '-f', 'fasta', '-i', EXAMPLES_PATH + 'MC1R_PigsOutg_aligned.fas', '-o', '0', '-p', '1', '-u', '0', '-t', '1000', '-s', '123456', '-G', '1', '-N', '3', '48', '46', '1', '-a', EXAMPLES_PATH + 'MC1R_H1frq.txt', '-g', EXAMPLES_PATH + 'MC1R.gff', 'nonsynonymous', 'Nuclear_Universal', '-T', PREVIOUS_TESTS_PATH + 'MC1R_PigsOutg_NSyn_Opttest.txt'
}

task prepareTests(dependsOn:prepareOptimalTest1) {
	doLast {
		println 'TESTS PREPARED SUCCESSFUL'
	}
}


/*
================================================================================
FIX KNOWN ACCEPTABLE DIFFERENCES IN THE NGASP OUTPUT
================================================================================
*/

task removeWindowsSedBackups(type: Delete) {
  delete 'uglyFolder', 'uglyFile'
}



def fixKnownDifferences(file_name) {

  println 'fixKnownDifferences for: ' + NGASP_TESTS_PATH + file_name

  if ((SOP == "WINDOWS") || (SOP == "LINUX")) {
            // Replace "current" by "previous"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', 's/current/previous/g', NGASP_TESTS_PATH + file_name
            }
            // Replace ".\tests\previous\" by "./tests/previous/"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', 's/\\.\\\\tests\\\\previous\\\\/\\.\\/tests\\/previous\\//g', NGASP_TESTS_PATH + file_name
            }
            // Replace ".\examples\" by "./examples/"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', 's/\\.\\\\examples\\\\/\\.\\/examples\\//g', NGASP_TESTS_PATH + file_name
            }
            // Replace "-nan" by "nan" in the "output file"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', 's/-nan/nan/g', NGASP_TESTS_PATH + file_name
            }
            // Replace "-nan" by "nan" in the "reference file"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', 's/-nan/nan/g', PREVIOUS_TESTS_PATH + file_name
            }
			if (SOP == "WINDOWS") {
				// Remove sed backups
				exec {
						executable 'remove_sed_backups.bat'
						args ''
				}
			}
  }

  if (SOP == "MAC") {
            // Replace "current" by "previous"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', "''", '-e', 's/current/previous/g', NGASP_TESTS_PATH + file_name
            }
            // Replace ".\tests\previous\" by "./tests/previous/"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', "''", '-e', 's/\\.\\\\tests\\\\previous\\\\/\\.\\/tests\\/previous\\//g', NGASP_TESTS_PATH + file_name
            }
            // Replace ".\examples\" by "./examples/"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', "''", '-e', 's/\\.\\\\examples\\\\/\\.\\/examples\\//g', NGASP_TESTS_PATH + file_name
            }
            // Replace "-nan" by "nan" in the "output file"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', "''", '-e', 's/-nan/nan/g', NGASP_TESTS_PATH + file_name
            }
            // Replace "-nan" by "nan" in the "reference file"
            exec {
                    executable MODIFY_FILES_APP
                    args '-i', "''", '-e', 's/-nan/nan/g', PREVIOUS_TESTS_PATH + file_name
            }
  }
}

/*
================================================================================
RUN TESTS
================================================================================
*/

/*
--------------------------------------------------------------------------------
PARAMETERS FOR FASTA INPUT -f fasta: [-p -g -c -O -t -s] WHOLE REGION ANALYSIS
--------------------------------------------------------------------------------
*/

task runFastaTest01(type:Exec, dependsOn:build) {
	def output_file = '100chr10.fa.01.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa.gz', '-o', '0', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest01(type:Exec, dependsOn:runFastaTest01) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.01.txt', NGASP_TESTS_PATH + '100chr10.fa.01.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest01b(type:Exec, dependsOn:verifyFastaTest01) {
	def output_file = '100chr10.fa.01b.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '1', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest01b(type:Exec, dependsOn:runFastaTest01b) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.01b.txt', NGASP_TESTS_PATH + '100chr10.fa.01b.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest02(type:Exec, dependsOn:verifyFastaTest01b) {
	def output_file = '100chr10.fa.02.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest02(type:Exec, dependsOn:runFastaTest02) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.02.txt', NGASP_TESTS_PATH + '100chr10.fa.02.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest03(type:Exec, dependsOn:verifyFastaTest02) {
	def output_file = '100chr10.fa.03.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest03(type:Exec, dependsOn:runFastaTest03) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.03.txt', NGASP_TESTS_PATH + '100chr10.fa.03.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest04(type:Exec, dependsOn:verifyFastaTest03) {
	def output_file = '100chr10.fa.04.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest04(type:Exec, dependsOn:runFastaTest04) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.04.txt', NGASP_TESTS_PATH + '100chr10.fa.04.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest05(type:Exec, dependsOn:verifyFastaTest04) {
	def output_file = '100chr10.fa.05.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest05(type:Exec, dependsOn:runFastaTest05) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.05.txt', NGASP_TESTS_PATH + '100chr10.fa.05.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest06(type:Exec, dependsOn:verifyFastaTest05) {
	def output_file = '100chr10.fa.06.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-p', '2'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest06(type:Exec, dependsOn:runFastaTest06) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.06.txt', NGASP_TESTS_PATH + '100chr10.fa.06.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest07(type:Exec, dependsOn:verifyFastaTest06) {
	def output_file = '100chr10.fa.07.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest07(type:Exec, dependsOn:runFastaTest07) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.07.txt', NGASP_TESTS_PATH + '100chr10.fa.07.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest08(type:Exec, dependsOn:verifyFastaTest07) {
	def output_file = '100chr10.fa.08.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-t', '1000', '-s', '1684'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest08(type:Exec, dependsOn:runFastaTest08) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.08.txt', NGASP_TESTS_PATH + '100chr10.fa.08.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest09(type:Exec, dependsOn:verifyFastaTest08) {
	def output_file = '100chr10.fa.09.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest09(type:Exec, dependsOn:runFastaTest09) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.09.txt', NGASP_TESTS_PATH + '100chr10.fa.09.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest10(type:Exec, dependsOn:verifyFastaTest09) {
	def output_file = '100chr10.fa.10.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest10(type:Exec, dependsOn:runFastaTest10) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.10.txt', NGASP_TESTS_PATH + '100chr10.fa.10.txt'
	doFirst { standardOutput = System.out }
}

task runFastaTest11(type:Exec, dependsOn:verifyFastaTest10) {
	def output_file = '100chr10.fa.11.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + '100Kchr10.fa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-g', EXAMPLES_PATH + '100Kchr10.gtf', 'nonsynonymous', 'Nuclear_Universal', '-c', 'max'
	doLast { fixKnownDifferences(output_file) }
}
task verifyFastaTest11(type:Exec, dependsOn:runFastaTest11) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.fa.11.txt', NGASP_TESTS_PATH + '100chr10.fa.11.txt'
	doFirst { standardOutput = System.out }
}

/*
--------------------------------------------------------------------------------
PARAMETERS FOR MS INPUT -f ms: -l [-r -m -F -v -q] SIMULATION ANALYSIS OF A
SINGLE REGION
--------------------------------------------------------------------------------
*/

task runMSTest00(type:Exec, dependsOn:verifyFastaTest11) {
	def output_file = '100chr10.ms.00.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt.gz', '-o', '0', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest00(type:Exec, dependsOn:runMSTest00) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.00.txt', NGASP_TESTS_PATH + '100chr10.ms.00.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest01(type:Exec, dependsOn:verifyMSTest00) {
	def output_file = '100chr10.ms.01.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt', '-o', '0', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest01(type:Exec, dependsOn:runMSTest01) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.01.txt', NGASP_TESTS_PATH + '100chr10.ms.01.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest01b(type:Exec, dependsOn:verifyMSTest01) {
	def output_file = '100chr10.ms.01b.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_02.ms.txt', '-o', '1', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest01b(type:Exec, dependsOn:runMSTest01b) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.01b.txt', NGASP_TESTS_PATH + '100chr10.ms.01b.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest02(type:Exec, dependsOn:verifyMSTest01b) {
	def output_file = '100chr10.ms.02.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_03.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest02(type:Exec, dependsOn:runMSTest02) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.02.txt', NGASP_TESTS_PATH + '100chr10.ms.02.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest03(type:Exec, dependsOn:verifyMSTest02) {
	def output_file = '100chr10.ms.03.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_03.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop1_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest03(type:Exec, dependsOn:runMSTest03) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.03.txt', NGASP_TESTS_PATH + '100chr10.ms.03.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest04(type:Exec, dependsOn:verifyMSTest03) {
	def output_file = '100chr10.ms.04.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_07.ms.txt', '-o', '1', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-l', '10000', '-r', '5'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest04(type:Exec, dependsOn:runMSTest04) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.04.txt', NGASP_TESTS_PATH + '100chr10.ms.04.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest05(type:Exec, dependsOn:verifyMSTest04) {
	def output_file = '100chr10.ms.05.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '10000', '-r', '5'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest05(type:Exec, dependsOn:runMSTest05) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.05.txt', NGASP_TESTS_PATH + '100chr10.ms.05.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest06(type:Exec, dependsOn:verifyMSTest05) {
	def output_file = '100chr10.ms.06.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '10000', '-r', '5', '-F', '1'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest06(type:Exec, dependsOn:runMSTest06) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.06.txt', NGASP_TESTS_PATH + '100chr10.ms.06.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest07(type:Exec, dependsOn:verifyMSTest06) {
	def output_file = '100chr10.ms.07.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '10000', '-r', '5', '-F', '1', '-q', '0.01'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest07(type:Exec, dependsOn:runMSTest07) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.07.txt', NGASP_TESTS_PATH + '100chr10.ms.07.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest08(type:Exec, dependsOn:verifyMSTest07) {
	def output_file = '100chr10.ms.08.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_tfa2ms_06.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '10000', '-r', '5', '-G', '1', '-v', '2.0'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest08(type:Exec, dependsOn:runMSTest08) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.08.txt', NGASP_TESTS_PATH + '100chr10.ms.08.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest09(type:Exec, dependsOn:verifyMSTest08) {
	def output_file = '100chr10.ms.09.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_ExcludeMissingVariantsmhits_NOoutg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest09(type:Exec, dependsOn:runMSTest09) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.09.txt', NGASP_TESTS_PATH + '100chr10.ms.09.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest10(type:Exec, dependsOn:verifyMSTest09) {
	def output_file = '100chr10.ms.10.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest10(type:Exec, dependsOn:runMSTest10) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.10.txt', NGASP_TESTS_PATH + '100chr10.ms.10.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest11(type:Exec, dependsOn:verifyMSTest10) {
	def output_file = '100chr10.ms.11.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest11(type:Exec, dependsOn:runMSTest11) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.11.txt', NGASP_TESTS_PATH + '100chr10.ms.11.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest12(type:Exec, dependsOn:verifyMSTest11) {
	def output_file = '100chr10.ms.12.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation.ms.txt', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684', '-v', '2.0'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest12(type:Exec, dependsOn:runMSTest12) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.ms.12.txt', NGASP_TESTS_PATH + '100chr10.ms.12.txt'
	doFirst { standardOutput = System.out }
}

task runMSTest13(type:Exec, dependsOn:verifyMSTest12) {
	/*doFirst { println NGASP_BINARY + ' ' + NGASP_COMMAND + ' ' + '-f' + ' ' + 'ms' + ' ' + '-i' + ' ' + EXAMPLES_PATH + '100Kchr10_simulation1000.ms.txt' + ' ' + '-o' + ' ' + '1' + ' ' + '-N' + ' ' + '2' + ' ' + '40' + ' ' + '2' + ' ' + '-T' + ' ' + NGASP_TESTS_PATH + '100chr10.ms.13.txt' + ' ' + '-l' + ' ' + '100000' + ' ' + '-G' + ' ' + '1' + ' ' + '-u' + ' ' + '1' + ' ' + '-m' + ' ' + EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt' + ' ' + '-t' + ' ' + '1000' + ' ' + '-s' + ' ' + '1684' + ' ' + '-v' + ' ' + '2.0' + ' ' + '-r' + ' ' + '1000' }*/
	def output_file = '100chr10.ms.13.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'ms', '-i', EXAMPLES_PATH + '100Kchr10_simulation1000.ms.txt', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-l', '100000', '-G', '1', '-u', '1', '-m', EXAMPLES_PATH + '100Kchr10_npop2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_MASK.txt', '-t', '1000', '-s', '1684', '-v', '2.0', '-r', '1000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyMSTest13(type:Exec, dependsOn:runMSTest13) { 
  def previous_path_file = PREVIOUS_TESTS_PATH + '100chr10.ms.13.txt'

  /*
    Disabled output comparisson for Windows and Mac.
    CCalcOpenMstatspopOpenMsFile::832
    This line has different output for Mac<->Linux and Variant output for Windows because of the randomize function:
      if (ran1() < vector_mask->data()[(long int) labs(matrix_pos->data()[li] - 1)]) { ...
  */
  if ((SOP == "WINDOWS") || (SOP == "MAC")) {
    previous_path_file = NGASP_TESTS_PATH + '100chr10.ms.13.txt'
  }

	commandLine COMPARE_FILES_APP, previous_path_file, NGASP_TESTS_PATH + '100chr10.ms.13.txt'
	doFirst { standardOutput = System.out }
}

/*
--------------------------------------------------------------------------------
PARAMETERS FOR TFASTA INPUT -f tfa: -w [-z -Y -W -E -O -t -s] SLIDING WINDOW
ANALYSIS OF EMPIRICAL DATA
--------------------------------------------------------------------------------
*/

task runTFATest01(type:Exec, dependsOn:verifyMSTest12) {
	def output_file = '100chr10.tfa.01.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa.gz', '-o', '0', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest01(type:Exec, dependsOn:runTFATest01) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.01.txt', NGASP_TESTS_PATH + '100chr10.tfa.01.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest01b(type:Exec, dependsOn:verifyTFATest01) {
	def output_file = '100chr10.tfa.01b.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '1', '42', '-T', NGASP_TESTS_PATH + output_file, '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest01b(type:Exec, dependsOn:runTFATest01b) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.01b.txt', NGASP_TESTS_PATH + '100chr10.tfa.01b.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest02(type:Exec, dependsOn:verifyTFATest01b) {
	def output_file = '100chr10.tfa.02.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest02(type:Exec, dependsOn:runTFATest02) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.02.txt', NGASP_TESTS_PATH + '100chr10.tfa.02.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest03(type:Exec, dependsOn:verifyTFATest02) {
	def output_file = '100chr10.tfa.03.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest03(type:Exec, dependsOn:runTFATest03) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.03.txt', NGASP_TESTS_PATH + '100chr10.tfa.03.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest04(type:Exec, dependsOn:verifyTFATest03) {
	def output_file = '100chr10.tfa.04.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest04(type:Exec, dependsOn:runTFATest04) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.04.txt', NGASP_TESTS_PATH + '100chr10.tfa.04.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest04b(type:Exec, dependsOn:verifyTFATest04) {
	def output_file = '10bchr10.tfa.04.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '10bpchr10.tfa', '-o', '10', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest04b(type:Exec, dependsOn:runTFATest04b) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '10bchr10.tfa.04.txt', NGASP_TESTS_PATH + '10bchr10.tfa.04.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest04c(type:Exec, dependsOn:verifyTFATest04b) {
	def output_file = '10bchr10c.tfa.04.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '10bpchr10.tfa', '-o', '6', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest04c(type:Exec, dependsOn:runTFATest04c) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '10bchr10c.tfa.04.txt', NGASP_TESTS_PATH + '10bchr10c.tfa.04.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest05(type:Exec, dependsOn:verifyTFATest04c) {
	def output_file = '100chr10.tfa.05.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest05(type:Exec, dependsOn:runTFATest05) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.05.txt', NGASP_TESTS_PATH + '100chr10.tfa.05.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest06(type:Exec, dependsOn:verifyTFATest05) {
	def output_file = '100chr10.tfa.06.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest06(type:Exec, dependsOn:runTFATest06) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.06.txt', NGASP_TESTS_PATH + '100chr10.tfa.06.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest07(type:Exec, dependsOn:verifyTFATest06) {
	def output_file = '100chr10.tfa.07.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10000', '-z', '20000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest07(type:Exec, dependsOn:runTFATest07) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.07.txt', NGASP_TESTS_PATH + '100chr10.tfa.07.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest08(type:Exec, dependsOn:verifyTFATest07) {
	def output_file = '100chr10.tfa.08.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-W', EXAMPLES_PATH + 'coord_100Kb.txt', '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest08(type:Exec, dependsOn:runTFATest08) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.08.txt', NGASP_TESTS_PATH + '100chr10.tfa.08.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest09(type:Exec, dependsOn:verifyTFATest08) {
	def output_file = '100chr10.tfa.09.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest09(type:Exec, dependsOn:runTFATest09) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.09.txt', NGASP_TESTS_PATH + '100chr10.tfa.09.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest10(type:Exec, dependsOn:verifyTFATest09) {
	def output_file = '100chr10.tfa.10.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '1000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt', '-Y', '0'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest10(type:Exec, dependsOn:runTFATest10) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.10.txt', NGASP_TESTS_PATH + '100chr10.tfa.10.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest11(type:Exec, dependsOn:verifyTFATest10) {
	def output_file = '100chr10.tfa.11.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000', '-E', EXAMPLES_PATH + '100Kchr10_fa2tfa_08.tfa_npops2_nsam42_nonsynonymous_max_IncludeMissingVariantsmhits_outg_ploidy1_WEIGHTS.txt', '-Y', '0'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest11(type:Exec, dependsOn:runTFATest11) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.11.txt', NGASP_TESTS_PATH + '100chr10.tfa.11.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest12(type:Exec, dependsOn:verifyTFATest11) {
	def output_file = '100chr10.tfa.12.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-w', '100000'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest12(type:Exec, dependsOn:runTFATest12) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.12.txt', NGASP_TESTS_PATH + '100chr10.tfa.12.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest13(type:Exec, dependsOn:verifyTFATest12) {
	def output_file = '100chr10.tfa.13.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest13(type:Exec, dependsOn:runTFATest13) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.13.txt', NGASP_TESTS_PATH + '100chr10.tfa.13.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest14(type:Exec, dependsOn:verifyTFATest13) {
	def output_file = '100chr10.tfa.14.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest14(type:Exec, dependsOn:runTFATest14) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.14.txt', NGASP_TESTS_PATH + '100chr10.tfa.14.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest14b(type:Exec, dependsOn:verifyTFATest14) {
	def output_file = '100chr10.tfa.14b.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '0', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100000', '-O', '42', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '40', '41', '-E', EXAMPLES_PATH + '100Kchr10_fa2ms_15.ms.txt_npops3_nsam84_nonsynonymous_max_ExcludeMissingmhits_outg_ploidy2_WEIGHTS.txt', '-Y', '0'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest14b(type:Exec, dependsOn:runTFATest14b) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.14b.txt', NGASP_TESTS_PATH + '100chr10.tfa.14b.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest15(type:Exec, dependsOn:verifyTFATest14b) {
	def output_file = '100chr10.tfa.15.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '10000', '-z', '20000', '-t', '1000', '-s', '1684'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest15(type:Exec, dependsOn:runTFATest15) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.15.txt', NGASP_TESTS_PATH + '100chr10.tfa.15.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest16(type:Exec, dependsOn:verifyTFATest15) {
	def output_file = '100chr10.tfa.16.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '2', '40', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-t', '1000', '-s', '1684'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest16(type:Exec, dependsOn:runTFATest16) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.16.txt', NGASP_TESTS_PATH + '100chr10.tfa.16.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest17(type:Exec, dependsOn:verifyTFATest16) {
	def output_file = '100chr10.tfa.17.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '20', '20', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-t', '1000', '-s', '1684'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest17(type:Exec, dependsOn:runTFATest17) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.17.txt', NGASP_TESTS_PATH + '100chr10.tfa.17.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest18(type:Exec, dependsOn:verifyTFATest16) { //************** verifyTFATest17
	def output_file = '100chr10.tfa.18.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '10', '10', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100', '-z', '100'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest18(type:Exec, dependsOn:runTFATest18) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.18.txt', NGASP_TESTS_PATH + '100chr10.tfa.18.txt'
	doFirst { standardOutput = System.out }
}

task runTFATest19(type:Exec, dependsOn:verifyTFATest18) {
	def output_file = '100chr10.tfa.19.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'tfa', '-i', EXAMPLES_PATH + '100Kchr10.tfa', '-o', '1', '-N', '3', '10', '10', '2', '-T', NGASP_TESTS_PATH + output_file, '-G', '1', '-u', '1', '-w', '100', '-z', '100', '-O', '22', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '40', '41'
	doLast { fixKnownDifferences(output_file) }
}
task verifyTFATest19(type:Exec, dependsOn:runTFATest19) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + '100chr10.tfa.19.txt', NGASP_TESTS_PATH + '100chr10.tfa.19.txt'
	doFirst { standardOutput = System.out }
}

task runOptimalTest1(type:Exec, dependsOn:verifyTFATest19) {  // ATTENTION: build must be with inGSL=1
	def output_file = 'MC1R_PigsOutg_NSyn_Opttest.txt'
	commandLine NGASP_BINARY, NGASP_COMMAND, '-f', 'fasta', '-i', EXAMPLES_PATH + 'MC1R_PigsOutg_aligned.fas', '-o', '0', '-p', '1', '-u', '0', '-t', '1000', '-s', '123456', '-G', '1', '-N', '3', '48', '46', '1', '-a', EXAMPLES_PATH + 'MC1R_H1frq.txt', '-g', EXAMPLES_PATH + 'MC1R.gff', 'nonsynonymous', 'Nuclear_Universal', '-T', NGASP_TESTS_PATH + output_file
	doLast { fixKnownDifferences(output_file) }
}
task verifyOptimalTest1(type:Exec, dependsOn:runOptimalTest1) {
	commandLine COMPARE_FILES_APP, PREVIOUS_TESTS_PATH + 'MC1R_PigsOutg_NSyn_Opttest.txt', NGASP_TESTS_PATH + 'MC1R_PigsOutg_NSyn_Opttest.txt'
	doFirst { standardOutput = System.out }
}


/*
================================================================================
RUN ALL
================================================================================
*/


task runTests(dependsOn:verifyOptimalTest1) {
	doLast {
		println 'TESTS SUCCESSFUL'
	}
}



